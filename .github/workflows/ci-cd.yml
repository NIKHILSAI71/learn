name: Build and Deploy Learn Platform

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Build application
      run: npm run build

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          GITHUB_REPO_URL=https://github.com/${{ github.repository }}.git
          BRANCH=${{ github.ref_name }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deployment step would go here"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "You can add your deployment logic here (AWS, Azure, GCP, etc.)"
        
    # Example deployment to different platforms:
    
    # - name: Deploy to Vercel
    #   uses: amondnet/vercel-action@v25
    #   with:
    #     vercel-token: ${{ secrets.VERCEL_TOKEN }}
    #     vercel-args: '--prod'
    #     vercel-org-id: ${{ secrets.ORG_ID }}
    #     vercel-project-id: ${{ secrets.PROJECT_ID }}
        
    # - name: Deploy to AWS ECS
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: task-definition.json
    #     service: learn-platform-service
    #     cluster: learn-platform-cluster
        
    # - name: Deploy to Google Cloud Run
    #   uses: google-github-actions/deploy-cloudrun@v1
    #   with:
    #     service: learn-platform
    #     image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
    #     region: us-central1

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: github.event_name == 'push'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
